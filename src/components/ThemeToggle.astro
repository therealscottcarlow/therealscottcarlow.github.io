---
---

<button id="theme-toggle" aria-label="Toggle dark mode">
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="currentColor" class="sun-icon">
    <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 10a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 10a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd" />
  </svg>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20" fill="currentColor" class="moon-icon">
    <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
  </svg>
</button>

<script>
  // Initialize theme based on user preference or browser setting
  const initTheme = () => {
    try {
      // Default to dark theme if no preference is saved
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme) {
        document.documentElement.setAttribute('data-theme', savedTheme);
        updateToggleIcon(savedTheme);
      } else {
        // Use dark theme by default
        document.documentElement.setAttribute('data-theme', 'dark');
        updateToggleIcon('dark');
        localStorage.setItem('theme', 'dark');
      }
    } catch (e) {
      console.error('Error initializing theme:', e);
    }
  };

  // Update the toggle icon based on the current theme
  const updateToggleIcon = (theme) => {
    const toggle = document.getElementById('theme-toggle');
    if (!toggle) return;

    const showSun = theme === 'dark';
    toggle.querySelector('.sun-icon').style.display = showSun ? 'none' : 'block';
    toggle.querySelector('.moon-icon').style.display = showSun ? 'block' : 'none';
  };

  // Toggle between light and dark themes
  const toggleTheme = () => {
    try {
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      updateToggleIcon(newTheme);
    } catch (e) {
      console.error('Error toggling theme:', e);
    }
  };

  // Initialize the theme on page load
  document.addEventListener('DOMContentLoaded', initTheme);

  // Set up event listener for theme toggle button
  document.addEventListener('astro:page-load', () => {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      // Initialize the toggle icon
      const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
      updateToggleIcon(currentTheme);
      
      // Add click event listener
      themeToggle.addEventListener('click', toggleTheme);
    }
  });

  // Also add event listener outside astro:page-load for initial page load
  window.addEventListener('load', () => {
    const themeToggle = document.getElementById('theme-toggle');
    if (themeToggle) {
      themeToggle.addEventListener('click', toggleTheme);
    }
  });
</script>

<style>
  button {
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: transparent;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 50%;
    transition: background-color 0.3s ease;
    color: var(--text-color);
  }

  button:hover {
    background-color: rgba(var(--gray), 0.1);
  }

  button:focus {
    outline: 2px solid var(--accent);
    outline-offset: 2px;
  }

  .sun-icon, .moon-icon {
    width: 24px;
    height: 24px;
  }

  /* Only one icon should be visible at a time */
  .sun-icon {
    display: none;
  }

  .moon-icon {
    display: block;
  }
</style>